import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';
import 'student.dart';
import 'dart:io';

class DatabaseHelper {
  static final _dbName = "students.db";
  static final _dbVersion = 1;
  static final tableName = "student_table";
  static final colId = 'id';
  static final colName = 'name';
  static final colAge = 'age';
  static final colSemester = 'semester';

  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;
  Future<Database?> get database async {
    if (_database != null) return _database;
    _database = await _initDatabase();
    return _database;
  }

  Future<Database> _initDatabase() async {
    try {
      Directory documentsDirectory = await getApplicationDocumentsDirectory();
      String path = join(documentsDirectory.path, _dbName);
      print("Database path: $path");
      return await openDatabase(path, version: _dbVersion, onCreate: _onCreate);
    } catch (e) {
      print("Error initializing database: $e");
      rethrow; // This will rethrow the error after logging it
    }
  }


  Future _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE $tableName (
        $colId TEXT PRIMARY KEY,
        $colName TEXT NOT NULL,
        $colAge INTEGER NOT NULL,
        $colSemester TEXT NOT NULL
      )
      ''');
  }

  Future<int> saveStudent(Student student) async {
    try {
      Database? db = await instance.database;
      int result = await db!.insert(tableName, student.toJson());
      print("Saved student with ID: ${student.id}"); // Debugging statement
      return result;
    } catch (e) {
      print("Error saving student: $e");
      return -1;
    }
  }

  Future<List<Student>> fetchAllStudents() async {
    try {
      Database? db = await instance.database;
      final students = await db!.query(tableName);
      print("Raw query result: $students"); // Debugging statement
      return students.map((json) => Student.fromJson(json)).toList();
    } catch (e) {
      print("Error fetching students: $e");
      return [];
    }
  }


  Future<int> updateStudent(Student student) async {
    Database? db = await instance.database;
    return await db!.update(tableName, student.toJson(),
        where: '$colId = ?', whereArgs: [student.id]);
  }

  Future<int> deleteStudent(String id) async {
    Database? db = await instance.database;
    return await db!.delete(tableName, where: '$colId = ?', whereArgs: [id]);
  }
}
